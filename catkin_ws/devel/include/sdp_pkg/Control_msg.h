// Generated by gencpp from file sdp_pkg/Control_msg.msg
// DO NOT EDIT!


#ifndef SDP_PKG_MESSAGE_CONTROL_MSG_H
#define SDP_PKG_MESSAGE_CONTROL_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sdp_pkg
{
template <class ContainerAllocator>
struct Control_msg_
{
  typedef Control_msg_<ContainerAllocator> Type;

  Control_msg_()
    : speed(0.0)
    , acceleration(0.0)
    , angle(0.0)  {
    }
  Control_msg_(const ContainerAllocator& _alloc)
    : speed(0.0)
    , acceleration(0.0)
    , angle(0.0)  {
  (void)_alloc;
    }



   typedef float _speed_type;
  _speed_type speed;

   typedef float _acceleration_type;
  _acceleration_type acceleration;

   typedef float _angle_type;
  _angle_type angle;





  typedef boost::shared_ptr< ::sdp_pkg::Control_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sdp_pkg::Control_msg_<ContainerAllocator> const> ConstPtr;

}; // struct Control_msg_

typedef ::sdp_pkg::Control_msg_<std::allocator<void> > Control_msg;

typedef boost::shared_ptr< ::sdp_pkg::Control_msg > Control_msgPtr;
typedef boost::shared_ptr< ::sdp_pkg::Control_msg const> Control_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sdp_pkg::Control_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sdp_pkg::Control_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sdp_pkg::Control_msg_<ContainerAllocator1> & lhs, const ::sdp_pkg::Control_msg_<ContainerAllocator2> & rhs)
{
  return lhs.speed == rhs.speed &&
    lhs.acceleration == rhs.acceleration &&
    lhs.angle == rhs.angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sdp_pkg::Control_msg_<ContainerAllocator1> & lhs, const ::sdp_pkg::Control_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sdp_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sdp_pkg::Control_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sdp_pkg::Control_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sdp_pkg::Control_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sdp_pkg::Control_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sdp_pkg::Control_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sdp_pkg::Control_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sdp_pkg::Control_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8c3b384e49aad271544f4a6b6032d073";
  }

  static const char* value(const ::sdp_pkg::Control_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8c3b384e49aad271ULL;
  static const uint64_t static_value2 = 0x544f4a6b6032d073ULL;
};

template<class ContainerAllocator>
struct DataType< ::sdp_pkg::Control_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sdp_pkg/Control_msg";
  }

  static const char* value(const ::sdp_pkg::Control_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sdp_pkg::Control_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Driving command for the robot in the simulation\n"
"\n"
"float32 speed\n"
"float32 acceleration\n"
"float32 angle\n"
;
  }

  static const char* value(const ::sdp_pkg::Control_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sdp_pkg::Control_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.speed);
      stream.next(m.acceleration);
      stream.next(m.angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Control_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sdp_pkg::Control_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sdp_pkg::Control_msg_<ContainerAllocator>& v)
  {
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "acceleration: ";
    Printer<float>::stream(s, indent + "  ", v.acceleration);
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SDP_PKG_MESSAGE_CONTROL_MSG_H
