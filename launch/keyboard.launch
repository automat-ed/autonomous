<?xml version="1.0" encoding="UTF-8"?>
<launch>
    <!-- Start Webots -->
    <arg name="no-gui" default="false" doc="Start Webots with minimal GUI"/>
    <arg name="world" default="world" doc="The name of the webots world to launch" />
    <include file="$(find simulation)/launch/webots.launch">
        <arg name="mode" value="pause"/>
        <arg name="no-gui" value="$(arg no-gui)"/>
        <!-- modify with path to world-->
        <arg name="world" value="$(find simulation)/worlds/$(arg world).wbt"/>
    </include>

    <arg name="controller_type" default="0"/>
    <group if="$(eval arg('controller_type') == 0)">
        <!-- External Webots Robot Controller -->
        <node name='sim_controller' pkg='simulation' type='full_controller' output='screen' respawn='true'>
            <param name="use_keyboard_control" value="true" />
        </node>
    </group>

    <group if="$(eval arg('controller_type') == 1)">
        <!-- External Webots Robot Controller -->
        <node name='sim_controller' pkg='simulation' type='full_controller' output='screen' respawn='true'/>

        <!-- C++ Keyboard Control -->
        <node name="keyboard_controller" pkg="controllers" type="keyboard_controller" output="screen">
            <param name="avel_scale" value="0.3"/>
            <param name="lvel_scale" value="0.3"/>
        </node>
    </group>

    <group if="$(eval arg('controller_type') == 2)">
        <!-- External Webots Robot Controller -->
        <node name='sim_controller' pkg='simulation' type='full_controller' output='screen' respawn='true'/>

        <!-- Python Keyboard Control -->
        <node if="$(eval arg('controller_type') == 2)" name="keyboard_controller" pkg="controllers" type="KeyboardController.py" output="screen">
            <param name="avel_scale" value="0.3"/>
            <param name="lvel_scale" value="0.3"/>
        </node>
    </group>




    <!-- Convert ground truth mesasges to Odometry messages to feed to move_base-->
    <!-- <node name="ground_truth_odom" pkg="simulation" type="ground_truth_odom.py" output="screen" respawn="true"/> -->

    <!-- Static Occupancy Grid-->
    <arg name="map_file" default="$(env AUTOMATED_HOME)/worlds/world.yaml"/>
    <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)" />

    <!-- Convert GPS to Odometry-->
    <!-- <node pkg="robot_localization" type="navsat_transform_node" name="navsat_transform_node">
        <param name="frequency" value="30"/>

        <remap from="imu/data" to="/imu/ground_truth"/>
        <remap from="gps/fix" to="/gps/ground_truth/coordinates"/>
        <remap from="odometry/filtered" to="/odom"/>

        <param name="publish_filtered_gps" value="true"/>
        <remap from="gps/filtered" to="/ekf/gps_data"/>
    </node>  -->

    <!-- EKF Local node, which fuses only contnuous data, i.e. no GPS -->
    <node pkg="robot_localization" type="ekf_localization_node" name="ekf_local">
        <rosparam command="load" file="config/ekf_local.yaml"/>
        <remap from="/odometry/filtered" to="/odom"/>
    </node> -->

    <!-- EKF Global node, which incorporates discrete GPS data -->
    <node pkg="robot_localization" type="ekf_localization_node" name="ekf_global">
        <rosparam command="load" file="config/ekf_global.yaml"/>
        <remap from="/odometry/filtered" to="/odom"/>
    </node> 

    <!--- Run AMCL --> 
    <!-- <include file="$(env AUTOMATED_HOME)/launch/amcl_diff.launch" /> -->

    <!-- Move base -->
    <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
        <rosparam file="$(env AUTOMATED_HOME)/config/costmap_common_params.yaml" command="load" ns="global_costmap" /> 
        <rosparam file="$(env AUTOMATED_HOME)/config/costmap_common_params.yaml" command="load" ns="local_costmap" />
        <rosparam file="$(env AUTOMATED_HOME)/config/local_costmap_params.yaml" command="load" />
        <rosparam file="$(env AUTOMATED_HOME)/config/global_costmap_params.yaml" command="load" /> 
        <rosparam file="$(env AUTOMATED_HOME)/config/base_local_planner_params.yaml" command="load" />
    </node>


</launch>


